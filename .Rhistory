setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,3)*prior(3)
return(g)
}
num<-integrate(gTheta,lower=lower,upper=upper)
fTheta<-function(theta){
f<-likelihood(raschObj,3)*prior(3)
return(f)
}
denom<-integrate(fTheta,lower=lower,upper=upper)
return(denom)
}
)
eap(testRasch, lower=-6, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
num<-integrate(gTheta,lower=lower,upper=upper)
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denom<-integrate(fTheta,lower=lower,upper=upper)
return(num/denom)
}
)
eap(testRasch, lower=-6, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
num<-integrate(gTheta,lower=lower,upper=upper)
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denom<-integrate(fTheta,lower=lower,upper=upper)
return(num)
}
)
eap(testRasch, lower=-6, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
num<-integrate(gTheta,lower=lower,upper=upper)
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denom<-integrate(fTheta,lower=lower,upper=upper)
return(num[1])
}
)
eap(testRasch, lower=-6, upper=6)
eap(testRasch, lower=-3, upper=6)
eap(testRasch, lower=-1, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
num<-integrate(gTheta,lower=lower,upper=upper)
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denom<-integrate(fTheta,lower=lower,upper=upper)
return(num[1]/denom[1])
}
)
eap(testRasch, lower=-1, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList[1]
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList[1]
ans<-num/denom
return(num/denom)
}
)
eap(testRasch, lower=-1, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList[1]
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList[1]
ans<-num/denom
return(ans)
}
)
eap(testRasch, lower=-1, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList[1]
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList[1]
ans<-num/denom
return(num)
}
)
eap(testRasch, lower=-1, upper=6)
a<-integrate(myFun,-6,6)
myFun<-function(x){
return(2*x)
}
a<-integrate(myFun,-6,6)
myFun<-function(x){
return(2*x)
}
a<-integrate(myFun,-2,6)
a[1]
ans<-a[1]
ans<-a$value
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList$value
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList$value
ans<-num/denom
return(num)
}
)
eap(testRasch, lower=-1, upper=6)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList$value
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList$value
ans<-num/denom
return(ans)
}
)
eap(testRasch, lower=-1, upper=6)
eap(testRasch, lower=-6, upper=6)
eap(testRasch, lower=-3, upper=6)
# EAP function
setGeneric(name="eap",
def=function(raschObj, lower=-6, upper=6, ...)
{standardGeneric("eap")}
)
setMethod(f="eap",
definition=function(raschObj, lower=-6, upper=6, ...){
gTheta<-function(theta){
g<-theta*likelihood(raschObj,theta)*prior(theta)
return(g)
}
numList<-integrate(gTheta,lower=lower,upper=upper)
num<-numList$value
fTheta<-function(theta){
f<-likelihood(raschObj,theta)*prior(theta)
return(f)
}
denomList<-integrate(fTheta,lower=lower,upper=upper)
denom<-denomList$value
ans<-num/denom
return(ans)
}
)
# Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
probTestRasch<-probability(testRasch,3)
probTestRasch
likeTestRasch<-likelihood(testRasch,3)
likeTestRasch
testPrior<-prior(3)
testPrior
eap(testRasch, lower=-3, upper=6)
eapTestRasch<-eap(testRasch, lower=-3, upper=6)
eapTestRasch
eapTestRasch<-eap(testRasch, lower=-6, upper=6)
eapTestRasch
eapTestRasch<-eap(testRasch, lower=-3, upper=6)
eapTestRasch
eapTestRasch<-eap(testRasch, lower=-3, upper=3)
eapTestRasch
# print function
setMethod("print", "Rasch",
function(x, ...){
eapResult<-eap(x)
name<-x@name
output<-list(name,eapResult)
names(output)<-c("Name","EAP Result")
return(output)
}
)
print(testRasch)
# print function
setMethod("print", "Rasch",
function(x, ...){
eapResult<-eap(x)
name<-x@testTakerName
output<-list(name,eapResult)
names(output)<-c("Name","EAP Result")
return(output)
}
)
print(testRasch)
## Creates package skeleton
# Only run this the first time to create the skeleton
devtools::create("easyRasch")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
# Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
probTestRasch<-probability(testRasch,3)
probTestRasch
likeTestRasch<-likelihood(testRasch,3)
likeTestRasch
testPrior<-prior(3)
testPrior
eapTestRasch<-eap(testRasch, lower=-3, upper=3)   # ans=0 if lower = -upper
eapTestRasch
print(testRasch)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
# Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
probTestRasch<-probability(testRasch,3)
probTestRasch
likeTestRasch<-likelihood(testRasch,3)
likeTestRasch
testPrior<-prior(3)
testPrior
eapTestRasch<-eap(testRasch, lower=-3, upper=3)   # ans=0 if lower = -upper
eapTestRasch
eapTestRasch<-eap(testRasch, lower=-1, upper=3)   # ans=0 if lower = -upper
eapTestRasch
print(testRasch)
eapTestRasch<-eap(testRasch, lower=-1, upper=3)   # ans=0 if lower = -upper
eapTestRasch
eapTestRasch2<-eap(testRasch, lower=-3, upper=3)   # ans=0 if lower = -upper
eapTestRasch2
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Intentional mistakes to test validation method
qDiff5<-c(1,2,3,4,5)
qAns4<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
## Intentional mistakes to test validation method
qDiff5<-c(1,2,3,4,5)
qAns4<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff5, y=qAns4)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Intentional mistakes to test validation method
qDiff5<-c(1,2,3,4,5)
qAns4<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff5, y=qAns4)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Intentional mistakes to test validation method
qDiff5<-c(1,2,3,4,5)
qAns4<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff5, y=qAns4)
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Intentional mistakes to test validation method
qDiff5<-c(1,2,3,4,5)
qAns4<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff5, y=qAns4)
qDiff2<-c(1,2,3,4,5)
qAns2<-c(1,1,0,1,NA)
testRasch2<-new("Rasch", testTakerName="Jim", a=qDiff2, y=qAns2)
missing(qAns2)
any(missing(qAns2))
?missing
is.na(qAns2)
any(is.na(qAns2))
## Load libraries
library(devtools)
library(roxygen2)
library(testthat)
## Set working directory
setwd("~/Documents/GitHub/Midterm")
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Intentional mistakes to test validation method
qDiff1<-c(1,2,3,4,5)
qAns1<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff1, y=qAns1)
qDiff2<-c(1,2,3,4,5)
qAns2<-c(1,1,0,1,NA)
testRasch2<-new("Rasch", testTakerName="Jim", a=qDiff2, y=qAns2)
qDiff3<-c(1,2,3,4,NA)
qAns3<-c(1,1,0,1,0)
testRasch3<-new("Rasch", testTakerName="Jim", a=qDiff3, y=qAns3)
qDiff2<-c(1,2,3,4,NA)
qAns2<-c(1,1,0,1,0)
testRasch2<-new("Rasch", testTakerName="Jim", a=qDiff2, y=qAns2)
qDiff3<-c(1,2,3,4,5)
qAns3<-c(1,1,0,1,NA)
testRasch3<-new("Rasch", testTakerName="Jim", a=qDiff3, y=qAns3)
## Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
testRasch
probTestRasch<-probability(testRasch,3)
probTestRasch
likeTestRasch<-likelihood(testRasch,3)
likeTestRasch
testPrior<-prior(3)
testPrior
eapTestRasch<-eap(testRasch, lower=-1, upper=3)   # ans=0 if lower = -upper
eapTestRasch
eapTestRasch2<-eap(testRasch, lower=-3, upper=3)   # ans=0 if lower = -upper
eapTestRasch2
print(testRasch)
calc<-function(a){
x<-exp(3-a)
p<-x/(1+x)
return(p)
}
aTest<-c(1,2,3,4,5)
sapply(aTest,calc)
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
testRasch
probTestRasch<-probability(testRasch,3)
probTestRasch
sapply(aTest,calc)
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
testRasch
probTestRasch<-probability(testRasch,3)
## Updates the package based on R scripts written, man and NAMESPACE automatically updates.
# Manually update DESCRIPTION if need be
current.code <- as.package("easyRasch")
load_all(current.code)
document(current.code)
check(current.code)
## Sample code to test that methods work
qDiff<-c(1,2,3,4,5)
qAns<-c(1,1,0,1,0)
testRasch<-new("Rasch", testTakerName="Jim", a=qDiff, y=qAns)
testRasch
probTestRasch<-probability(testRasch,3)
probTestRasch
likeTestRasch<-likelihood(testRasch,3)
likeTestRasch
testPrior<-prior(3)
testPrior
eapTestRasch<-eap(testRasch, lower=-1, upper=3)   # ans=0 if lower = -upper
eapTestRasch
eapTestRasch2<-eap(testRasch, lower=-3, upper=3)   # ans=0 if lower = -upper
eapTestRasch2
print(testRasch)
## Intentional mistakes to test validation method
qDiff1<-c(1,2,3,4,5)
qAns1<-c(1,1,0,1)
testRasch1<-new("Rasch", testTakerName="Jim", a=qDiff1, y=qAns1)
qDiff2<-c(1,2,3,4,NA)
qAns2<-c(1,1,0,1,0)
testRasch2<-new("Rasch", testTakerName="Jim", a=qDiff2, y=qAns2)
qDiff3<-c(1,2,3,4,5)
qAns3<-c(1,1,0,1,NA)
testRasch3<-new("Rasch", testTakerName="Jim", a=qDiff3, y=qAns3)
